                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8l_usart
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_GetClockFreq
                                     12 	.globl _USART_DeInit
                                     13 	.globl _USART_Init
                                     14 	.globl _USART_ClockInit
                                     15 	.globl _USART_Cmd
                                     16 	.globl _USART_SetPrescaler
                                     17 	.globl _USART_SendBreak
                                     18 	.globl _USART_ReceiveData8
                                     19 	.globl _USART_ReceiveData9
                                     20 	.globl _USART_SendData8
                                     21 	.globl _USART_SendData9
                                     22 	.globl _USART_ReceiverWakeUpCmd
                                     23 	.globl _USART_SetAddress
                                     24 	.globl _USART_WakeUpConfig
                                     25 	.globl _USART_HalfDuplexCmd
                                     26 	.globl _USART_SmartCardCmd
                                     27 	.globl _USART_SmartCardNACKCmd
                                     28 	.globl _USART_SetGuardTime
                                     29 	.globl _USART_IrDAConfig
                                     30 	.globl _USART_IrDACmd
                                     31 	.globl _USART_DMACmd
                                     32 	.globl _USART_ITConfig
                                     33 	.globl _USART_GetFlagStatus
                                     34 	.globl _USART_ClearFlag
                                     35 	.globl _USART_GetITStatus
                                     36 	.globl _USART_ClearITPendingBit
                                     37 ;--------------------------------------------------------
                                     38 ; ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DATA
                                     41 ;--------------------------------------------------------
                                     42 ; ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area INITIALIZED
                                     45 ;--------------------------------------------------------
                                     46 ; absolute external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DABS (ABS)
                                     49 
                                     50 ; default segment ordering for linker
                                     51 	.area HOME
                                     52 	.area GSINIT
                                     53 	.area GSFINAL
                                     54 	.area CONST
                                     55 	.area INITIALIZER
                                     56 	.area CODE
                                     57 
                                     58 ;--------------------------------------------------------
                                     59 ; global & static initialisations
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
                                     62 	.area GSINIT
                                     63 	.area GSFINAL
                                     64 	.area GSINIT
                                     65 ;--------------------------------------------------------
                                     66 ; Home
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
                                     69 	.area HOME
                                     70 ;--------------------------------------------------------
                                     71 ; code
                                     72 ;--------------------------------------------------------
                                     73 	.area CODE
                                     74 ;	libs/stm8l_usart.c: 148: void USART_DeInit(USART_TypeDef* USARTx)
                                     75 ;	-----------------------------------------
                                     76 ;	 function USART_DeInit
                                     77 ;	-----------------------------------------
      000000                         78 _USART_DeInit:
                                     79 ;	libs/stm8l_usart.c: 154: (void) USARTx->DR;
      000000 90 93            [ 1]   80 	ldw	y, x
      000002 E6 01            [ 1]   81 	ld	a, (0x1, x)
                                     82 ;	libs/stm8l_usart.c: 156: USARTx->BRR2 = USART_BRR2_RESET_VALUE;  /* Set USART_BRR2 to reset value 0x00 */
      000004 93               [ 1]   83 	ldw	x, y
      000005 6F 03            [ 1]   84 	clr	(0x0003, x)
                                     85 ;	libs/stm8l_usart.c: 157: USARTx->BRR1 = USART_BRR1_RESET_VALUE;  /* Set USART_BRR1 to reset value 0x00 */
      000007 93               [ 1]   86 	ldw	x, y
      000008 5C               [ 1]   87 	incw	x
      000009 5C               [ 1]   88 	incw	x
      00000A 7F               [ 1]   89 	clr	(x)
                                     90 ;	libs/stm8l_usart.c: 159: USARTx->CR1 = USART_CR1_RESET_VALUE;  /* Set USART_CR1 to reset value 0x00 */
      00000B 93               [ 1]   91 	ldw	x, y
      00000C 6F 04            [ 1]   92 	clr	(0x0004, x)
                                     93 ;	libs/stm8l_usart.c: 160: USARTx->CR2 = USART_CR2_RESET_VALUE;  /* Set USART_CR2 to reset value 0x00 */
      00000E 93               [ 1]   94 	ldw	x, y
      00000F 6F 05            [ 1]   95 	clr	(0x0005, x)
                                     96 ;	libs/stm8l_usart.c: 161: USARTx->CR3 = USART_CR3_RESET_VALUE;  /* Set USART_CR3 to reset value 0x00 */
      000011 93               [ 1]   97 	ldw	x, y
      000012 6F 06            [ 1]   98 	clr	(0x0006, x)
                                     99 ;	libs/stm8l_usart.c: 162: USARTx->CR4 = USART_CR4_RESET_VALUE;  /* Set USART_CR4 to reset value 0x00 */
      000014 93               [ 1]  100 	ldw	x, y
      000015 6F 07            [ 1]  101 	clr	(0x0007, x)
                                    102 ;	libs/stm8l_usart.c: 163: }
      000017 81               [ 4]  103 	ret
                                    104 ;	libs/stm8l_usart.c: 192: void USART_Init(USART_TypeDef* USARTx, uint32_t BaudRate, USART_WordLength_TypeDef
                                    105 ;	-----------------------------------------
                                    106 ;	 function USART_Init
                                    107 ;	-----------------------------------------
      000018                        108 _USART_Init:
      000018 52 0B            [ 2]  109 	sub	sp, #11
                                    110 ;	libs/stm8l_usart.c: 210: USARTx->CR1 &= (uint8_t)(~(USART_CR1_PCEN | USART_CR1_PS | USART_CR1_M));
      00001A 1F 0A            [ 2]  111 	ldw	(0x0a, sp), x
      00001C 1C 00 04         [ 2]  112 	addw	x, #0x0004
      00001F F6               [ 1]  113 	ld	a, (x)
      000020 A4 E9            [ 1]  114 	and	a, #0xe9
      000022 6B 09            [ 1]  115 	ld	(0x09, sp), a
      000024 F7               [ 1]  116 	ld	(x), a
                                    117 ;	libs/stm8l_usart.c: 213: USARTx->CR1 |= (uint8_t)((uint8_t)USART_WordLength | (uint8_t)USART_Parity);
      000025 F6               [ 1]  118 	ld	a, (x)
      000026 7B 12            [ 1]  119 	ld	a, (0x12, sp)
      000028 1A 14            [ 1]  120 	or	a, (0x14, sp)
      00002A 1A 09            [ 1]  121 	or	a, (0x09, sp)
      00002C F7               [ 1]  122 	ld	(x), a
                                    123 ;	libs/stm8l_usart.c: 216: USARTx->CR3 &= (uint8_t)(~USART_CR3_STOP);
      00002D 1E 0A            [ 2]  124 	ldw	x, (0x0a, sp)
      00002F 1C 00 06         [ 2]  125 	addw	x, #0x0006
      000032 F6               [ 1]  126 	ld	a, (x)
      000033 A4 CF            [ 1]  127 	and	a, #0xcf
      000035 F7               [ 1]  128 	ld	(x), a
                                    129 ;	libs/stm8l_usart.c: 218: USARTx->CR3 |= (uint8_t)USART_StopBits;
      000036 88               [ 1]  130 	push	a
      000037 F6               [ 1]  131 	ld	a, (x)
      000038 84               [ 1]  132 	pop	a
      000039 1A 13            [ 1]  133 	or	a, (0x13, sp)
      00003B F7               [ 1]  134 	ld	(x), a
                                    135 ;	libs/stm8l_usart.c: 221: USARTx->BRR1 &= (uint8_t)(~USART_BRR1_DIVM);
      00003C 1E 0A            [ 2]  136 	ldw	x, (0x0a, sp)
      00003E 5C               [ 1]  137 	incw	x
      00003F 5C               [ 1]  138 	incw	x
      000040 1F 01            [ 2]  139 	ldw	(0x01, sp), x
      000042 F6               [ 1]  140 	ld	a, (x)
      000043 1E 01            [ 2]  141 	ldw	x, (0x01, sp)
      000045 7F               [ 1]  142 	clr	(x)
                                    143 ;	libs/stm8l_usart.c: 223: USARTx->BRR2 &= (uint8_t)(~USART_BRR2_DIVM);
      000046 1E 0A            [ 2]  144 	ldw	x, (0x0a, sp)
      000048 1C 00 03         [ 2]  145 	addw	x, #0x0003
      00004B 1F 03            [ 2]  146 	ldw	(0x03, sp), x
      00004D F6               [ 1]  147 	ld	a, (x)
      00004E A4 0F            [ 1]  148 	and	a, #0x0f
      000050 1E 03            [ 2]  149 	ldw	x, (0x03, sp)
      000052 F7               [ 1]  150 	ld	(x), a
                                    151 ;	libs/stm8l_usart.c: 225: USARTx->BRR2 &= (uint8_t)(~USART_BRR2_DIVF);
      000053 1E 03            [ 2]  152 	ldw	x, (0x03, sp)
      000055 88               [ 1]  153 	push	a
      000056 F6               [ 1]  154 	ld	a, (x)
      000057 84               [ 1]  155 	pop	a
      000058 A4 F0            [ 1]  156 	and	a, #0xf0
      00005A 1E 03            [ 2]  157 	ldw	x, (0x03, sp)
      00005C F7               [ 1]  158 	ld	(x), a
                                    159 ;	libs/stm8l_usart.c: 227: BaudRate_Mantissa  = (uint32_t)(CLK_GetClockFreq() / BaudRate );
      00005D CDr00r00         [ 4]  160 	call	_CLK_GetClockFreq
      000060 1F 08            [ 2]  161 	ldw	(0x08, sp), x
      000062 1E 10            [ 2]  162 	ldw	x, (0x10, sp)
      000064 89               [ 2]  163 	pushw	x
      000065 1E 10            [ 2]  164 	ldw	x, (0x10, sp)
      000067 89               [ 2]  165 	pushw	x
      000068 1E 0C            [ 2]  166 	ldw	x, (0x0c, sp)
      00006A 89               [ 2]  167 	pushw	x
      00006B 90 89            [ 2]  168 	pushw	y
      00006D CDr00r00         [ 4]  169 	call	__divulong
      000070 5B 08            [ 2]  170 	addw	sp, #8
      000072 17 05            [ 2]  171 	ldw	(0x05, sp), y
                                    172 ;	libs/stm8l_usart.c: 229: USARTx->BRR2 = (uint8_t)((BaudRate_Mantissa >> (uint8_t)8) & (uint8_t)0xF0);
      000074 9E               [ 1]  173 	ld	a, xh
      000075 A4 F0            [ 1]  174 	and	a, #0xf0
      000077 6B 09            [ 1]  175 	ld	(0x09, sp), a
      000079 16 03            [ 2]  176 	ldw	y, (0x03, sp)
      00007B 7B 09            [ 1]  177 	ld	a, (0x09, sp)
      00007D 90 F7            [ 1]  178 	ld	(y), a
                                    179 ;	libs/stm8l_usart.c: 231: USARTx->BRR2 |= (uint8_t)(BaudRate_Mantissa & (uint8_t)0x0F);
      00007F 16 03            [ 2]  180 	ldw	y, (0x03, sp)
      000081 90 F6            [ 1]  181 	ld	a, (y)
      000083 9F               [ 1]  182 	ld	a, xl
      000084 A4 0F            [ 1]  183 	and	a, #0x0f
      000086 1A 09            [ 1]  184 	or	a, (0x09, sp)
      000088 16 03            [ 2]  185 	ldw	y, (0x03, sp)
      00008A 90 F7            [ 1]  186 	ld	(y), a
                                    187 ;	libs/stm8l_usart.c: 233: USARTx->BRR1 = (uint8_t)(BaudRate_Mantissa >> (uint8_t)4);
      00008C A6 10            [ 1]  188 	ld	a, #0x10
      00008E 62               [ 2]  189 	div	x, a
      00008F 9F               [ 1]  190 	ld	a, xl
      000090 1E 01            [ 2]  191 	ldw	x, (0x01, sp)
      000092 F7               [ 1]  192 	ld	(x), a
                                    193 ;	libs/stm8l_usart.c: 236: USARTx->CR2 &= (uint8_t)~(USART_CR2_TEN | USART_CR2_REN);
      000093 1E 0A            [ 2]  194 	ldw	x, (0x0a, sp)
      000095 1C 00 05         [ 2]  195 	addw	x, #0x0005
      000098 F6               [ 1]  196 	ld	a, (x)
      000099 A4 F3            [ 1]  197 	and	a, #0xf3
      00009B F7               [ 1]  198 	ld	(x), a
                                    199 ;	libs/stm8l_usart.c: 238: USARTx->CR2 |= (uint8_t)USART_Mode;
      00009C 88               [ 1]  200 	push	a
      00009D F6               [ 1]  201 	ld	a, (x)
      00009E 84               [ 1]  202 	pop	a
      00009F 1A 15            [ 1]  203 	or	a, (0x15, sp)
      0000A1 F7               [ 1]  204 	ld	(x), a
                                    205 ;	libs/stm8l_usart.c: 239: }
      0000A2 1E 0C            [ 2]  206 	ldw	x, (12, sp)
      0000A4 5B 15            [ 2]  207 	addw	sp, #21
      0000A6 FC               [ 2]  208 	jp	(x)
                                    209 ;	libs/stm8l_usart.c: 264: void USART_ClockInit(USART_TypeDef* USARTx, USART_Clock_TypeDef USART_Clock,
                                    210 ;	-----------------------------------------
                                    211 ;	 function USART_ClockInit
                                    212 ;	-----------------------------------------
      0000A7                        213 _USART_ClockInit:
      0000A7 52 04            [ 2]  214 	sub	sp, #4
      0000A9 6B 04            [ 1]  215 	ld	(0x04, sp), a
                                    216 ;	libs/stm8l_usart.c: 275: USARTx->CR3 &= (uint8_t)~(USART_CR3_CPOL | USART_CR3_CPHA | USART_CR3_LBCL);
      0000AB 1C 00 06         [ 2]  217 	addw	x, #0x0006
      0000AE 1F 01            [ 2]  218 	ldw	(0x01, sp), x
      0000B0 F6               [ 1]  219 	ld	a, (x)
      0000B1 A4 F8            [ 1]  220 	and	a, #0xf8
      0000B3 6B 03            [ 1]  221 	ld	(0x03, sp), a
      0000B5 1E 01            [ 2]  222 	ldw	x, (0x01, sp)
      0000B7 7B 03            [ 1]  223 	ld	a, (0x03, sp)
      0000B9 F7               [ 1]  224 	ld	(x), a
                                    225 ;	libs/stm8l_usart.c: 277: USARTx->CR3 |= (uint8_t)((uint8_t)((uint8_t)(USART_CPOL | (uint8_t)USART_CPHA ) | USART_LastBit));
      0000BA 1E 01            [ 2]  226 	ldw	x, (0x01, sp)
      0000BC F6               [ 1]  227 	ld	a, (x)
      0000BD 7B 07            [ 1]  228 	ld	a, (0x07, sp)
      0000BF 1A 08            [ 1]  229 	or	a, (0x08, sp)
      0000C1 1A 09            [ 1]  230 	or	a, (0x09, sp)
      0000C3 1A 03            [ 1]  231 	or	a, (0x03, sp)
      0000C5 1E 01            [ 2]  232 	ldw	x, (0x01, sp)
      0000C7 F7               [ 1]  233 	ld	(x), a
                                    234 ;	libs/stm8l_usart.c: 275: USARTx->CR3 &= (uint8_t)~(USART_CR3_CPOL | USART_CR3_CPHA | USART_CR3_LBCL);
      0000C8 1E 01            [ 2]  235 	ldw	x, (0x01, sp)
      0000CA F6               [ 1]  236 	ld	a, (x)
                                    237 ;	libs/stm8l_usart.c: 279: if (USART_Clock != USART_Clock_Disable)
      0000CB 0D 04            [ 1]  238 	tnz	(0x04, sp)
      0000CD 27 07            [ 1]  239 	jreq	00102$
                                    240 ;	libs/stm8l_usart.c: 281: USARTx->CR3 |= (uint8_t)(USART_CR3_CLKEN); /* Set the Clock Enable bit */
      0000CF AA 08            [ 1]  241 	or	a, #0x08
      0000D1 1E 01            [ 2]  242 	ldw	x, (0x01, sp)
      0000D3 F7               [ 1]  243 	ld	(x), a
      0000D4 20 05            [ 2]  244 	jra	00104$
      0000D6                        245 00102$:
                                    246 ;	libs/stm8l_usart.c: 285: USARTx->CR3 &= (uint8_t)(~USART_CR3_CLKEN); /* Clear the Clock Enable bit */
      0000D6 A4 F7            [ 1]  247 	and	a, #0xf7
      0000D8 1E 01            [ 2]  248 	ldw	x, (0x01, sp)
      0000DA F7               [ 1]  249 	ld	(x), a
      0000DB                        250 00104$:
                                    251 ;	libs/stm8l_usart.c: 287: }
      0000DB 1E 05            [ 2]  252 	ldw	x, (5, sp)
      0000DD 5B 09            [ 2]  253 	addw	sp, #9
      0000DF FC               [ 2]  254 	jp	(x)
                                    255 ;	libs/stm8l_usart.c: 296: void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
                                    256 ;	-----------------------------------------
                                    257 ;	 function USART_Cmd
                                    258 ;	-----------------------------------------
      0000E0                        259 _USART_Cmd:
      0000E0 88               [ 1]  260 	push	a
      0000E1 6B 01            [ 1]  261 	ld	(0x01, sp), a
                                    262 ;	libs/stm8l_usart.c: 300: USARTx->CR1 &= (uint8_t)(~USART_CR1_USARTD); /**< USART Enable */
      0000E3 1C 00 04         [ 2]  263 	addw	x, #0x0004
      0000E6 F6               [ 1]  264 	ld	a, (x)
                                    265 ;	libs/stm8l_usart.c: 298: if (NewState != DISABLE)
      0000E7 0D 01            [ 1]  266 	tnz	(0x01, sp)
      0000E9 27 05            [ 1]  267 	jreq	00102$
                                    268 ;	libs/stm8l_usart.c: 300: USARTx->CR1 &= (uint8_t)(~USART_CR1_USARTD); /**< USART Enable */
      0000EB A4 DF            [ 1]  269 	and	a, #0xdf
      0000ED F7               [ 1]  270 	ld	(x), a
      0000EE 20 03            [ 2]  271 	jra	00104$
      0000F0                        272 00102$:
                                    273 ;	libs/stm8l_usart.c: 304: USARTx->CR1 |= USART_CR1_USARTD;  /**< USART Disable (for low power consumption) */
      0000F0 AA 20            [ 1]  274 	or	a, #0x20
      0000F2 F7               [ 1]  275 	ld	(x), a
      0000F3                        276 00104$:
                                    277 ;	libs/stm8l_usart.c: 306: }
      0000F3 84               [ 1]  278 	pop	a
      0000F4 81               [ 4]  279 	ret
                                    280 ;	libs/stm8l_usart.c: 329: void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
                                    281 ;	-----------------------------------------
                                    282 ;	 function USART_SetPrescaler
                                    283 ;	-----------------------------------------
      0000F5                        284 _USART_SetPrescaler:
                                    285 ;	libs/stm8l_usart.c: 332: USARTx->PSCR = USART_Prescaler;
      0000F5 1C 00 0A         [ 2]  286 	addw	x, #0x000a
      0000F8 F7               [ 1]  287 	ld	(x), a
                                    288 ;	libs/stm8l_usart.c: 333: }
      0000F9 81               [ 4]  289 	ret
                                    290 ;	libs/stm8l_usart.c: 340: void USART_SendBreak(USART_TypeDef* USARTx)
                                    291 ;	-----------------------------------------
                                    292 ;	 function USART_SendBreak
                                    293 ;	-----------------------------------------
      0000FA                        294 _USART_SendBreak:
                                    295 ;	libs/stm8l_usart.c: 342: USARTx->CR2 |= USART_CR2_SBK;
      0000FA 1C 00 05         [ 2]  296 	addw	x, #0x0005
      0000FD F6               [ 1]  297 	ld	a, (x)
      0000FE AA 01            [ 1]  298 	or	a, #0x01
      000100 F7               [ 1]  299 	ld	(x), a
                                    300 ;	libs/stm8l_usart.c: 343: }
      000101 81               [ 4]  301 	ret
                                    302 ;	libs/stm8l_usart.c: 382: uint8_t USART_ReceiveData8(USART_TypeDef* USARTx)
                                    303 ;	-----------------------------------------
                                    304 ;	 function USART_ReceiveData8
                                    305 ;	-----------------------------------------
      000102                        306 _USART_ReceiveData8:
                                    307 ;	libs/stm8l_usart.c: 384: return USARTx->DR;
      000102 E6 01            [ 1]  308 	ld	a, (0x1, x)
                                    309 ;	libs/stm8l_usart.c: 385: }
      000104 81               [ 4]  310 	ret
                                    311 ;	libs/stm8l_usart.c: 392: uint16_t USART_ReceiveData9(USART_TypeDef* USARTx)
                                    312 ;	-----------------------------------------
                                    313 ;	 function USART_ReceiveData9
                                    314 ;	-----------------------------------------
      000105                        315 _USART_ReceiveData9:
      000105 52 02            [ 2]  316 	sub	sp, #2
                                    317 ;	libs/stm8l_usart.c: 396: temp = ((uint16_t)(((uint16_t)((uint16_t)USARTx->CR1 & (uint16_t)USART_CR1_R8)) << 1));
      000107 90 93            [ 1]  318 	ldw	y, x
      000109 E6 04            [ 1]  319 	ld	a, (0x4, x)
      00010B A4 80            [ 1]  320 	and	a, #0x80
      00010D 97               [ 1]  321 	ld	xl, a
      00010E 4F               [ 1]  322 	clr	a
      00010F 95               [ 1]  323 	ld	xh, a
      000110 58               [ 2]  324 	sllw	x
      000111 1F 01            [ 2]  325 	ldw	(0x01, sp), x
                                    326 ;	libs/stm8l_usart.c: 397: return (uint16_t)( ((uint16_t)((uint16_t)USARTx->DR) | temp) & ((uint16_t)0x01FF));
      000113 90 E6 01         [ 1]  327 	ld	a, (0x1, y)
      000116 5F               [ 1]  328 	clrw	x
      000117 1A 02            [ 1]  329 	or	a, (0x02, sp)
      000119 02               [ 1]  330 	rlwa	x
      00011A 1A 01            [ 1]  331 	or	a, (0x01, sp)
      00011C A4 01            [ 1]  332 	and	a, #0x01
      00011E 95               [ 1]  333 	ld	xh, a
                                    334 ;	libs/stm8l_usart.c: 398: }
      00011F 5B 02            [ 2]  335 	addw	sp, #2
      000121 81               [ 4]  336 	ret
                                    337 ;	libs/stm8l_usart.c: 405: void USART_SendData8(USART_TypeDef* USARTx, uint8_t Data)
                                    338 ;	-----------------------------------------
                                    339 ;	 function USART_SendData8
                                    340 ;	-----------------------------------------
      000122                        341 _USART_SendData8:
                                    342 ;	libs/stm8l_usart.c: 408: USARTx->DR = Data;
      000122 5C               [ 1]  343 	incw	x
      000123 F7               [ 1]  344 	ld	(x), a
                                    345 ;	libs/stm8l_usart.c: 409: }
      000124 81               [ 4]  346 	ret
                                    347 ;	libs/stm8l_usart.c: 418: void USART_SendData9(USART_TypeDef* USARTx, uint16_t Data)
                                    348 ;	-----------------------------------------
                                    349 ;	 function USART_SendData9
                                    350 ;	-----------------------------------------
      000125                        351 _USART_SendData9:
      000125 52 03            [ 2]  352 	sub	sp, #3
                                    353 ;	libs/stm8l_usart.c: 423: USARTx->CR1 &= ((uint8_t)~USART_CR1_T8);
      000127 1F 02            [ 2]  354 	ldw	(0x02, sp), x
      000129 1C 00 04         [ 2]  355 	addw	x, #0x0004
      00012C F6               [ 1]  356 	ld	a, (x)
      00012D A4 BF            [ 1]  357 	and	a, #0xbf
      00012F 6B 01            [ 1]  358 	ld	(0x01, sp), a
      000131 F7               [ 1]  359 	ld	(x), a
                                    360 ;	libs/stm8l_usart.c: 426: USARTx->CR1 |= (uint8_t)(((uint8_t)(Data >> 2)) & USART_CR1_T8);
      000132 F6               [ 1]  361 	ld	a, (x)
      000133 16 06            [ 2]  362 	ldw	y, (0x06, sp)
      000135 90 54            [ 2]  363 	srlw	y
      000137 90 54            [ 2]  364 	srlw	y
      000139 90 9F            [ 1]  365 	ld	a, yl
      00013B A4 40            [ 1]  366 	and	a, #0x40
      00013D 1A 01            [ 1]  367 	or	a, (0x01, sp)
      00013F F7               [ 1]  368 	ld	(x), a
                                    369 ;	libs/stm8l_usart.c: 429: USARTx->DR   = (uint8_t)(Data);
      000140 1E 02            [ 2]  370 	ldw	x, (0x02, sp)
      000142 5C               [ 1]  371 	incw	x
      000143 7B 07            [ 1]  372 	ld	a, (0x07, sp)
      000145 F7               [ 1]  373 	ld	(x), a
                                    374 ;	libs/stm8l_usart.c: 430: }
      000146 1E 04            [ 2]  375 	ldw	x, (4, sp)
      000148 5B 07            [ 2]  376 	addw	sp, #7
      00014A FC               [ 2]  377 	jp	(x)
                                    378 ;	libs/stm8l_usart.c: 473: void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
                                    379 ;	-----------------------------------------
                                    380 ;	 function USART_ReceiverWakeUpCmd
                                    381 ;	-----------------------------------------
      00014B                        382 _USART_ReceiverWakeUpCmd:
      00014B 88               [ 1]  383 	push	a
      00014C 6B 01            [ 1]  384 	ld	(0x01, sp), a
                                    385 ;	libs/stm8l_usart.c: 480: USARTx->CR2 |= USART_CR2_RWU;
      00014E 1C 00 05         [ 2]  386 	addw	x, #0x0005
      000151 F6               [ 1]  387 	ld	a, (x)
                                    388 ;	libs/stm8l_usart.c: 477: if (NewState != DISABLE)
      000152 0D 01            [ 1]  389 	tnz	(0x01, sp)
      000154 27 05            [ 1]  390 	jreq	00102$
                                    391 ;	libs/stm8l_usart.c: 480: USARTx->CR2 |= USART_CR2_RWU;
      000156 AA 02            [ 1]  392 	or	a, #0x02
      000158 F7               [ 1]  393 	ld	(x), a
      000159 20 03            [ 2]  394 	jra	00104$
      00015B                        395 00102$:
                                    396 ;	libs/stm8l_usart.c: 485: USARTx->CR2 &= ((uint8_t)~USART_CR2_RWU);
      00015B A4 FD            [ 1]  397 	and	a, #0xfd
      00015D F7               [ 1]  398 	ld	(x), a
      00015E                        399 00104$:
                                    400 ;	libs/stm8l_usart.c: 487: }
      00015E 84               [ 1]  401 	pop	a
      00015F 81               [ 4]  402 	ret
                                    403 ;	libs/stm8l_usart.c: 496: void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
                                    404 ;	-----------------------------------------
                                    405 ;	 function USART_SetAddress
                                    406 ;	-----------------------------------------
      000160                        407 _USART_SetAddress:
      000160 88               [ 1]  408 	push	a
      000161 6B 01            [ 1]  409 	ld	(0x01, sp), a
                                    410 ;	libs/stm8l_usart.c: 502: USARTx->CR4 &= ((uint8_t)~USART_CR4_ADD);
      000163 1C 00 07         [ 2]  411 	addw	x, #0x0007
      000166 F6               [ 1]  412 	ld	a, (x)
      000167 A4 F0            [ 1]  413 	and	a, #0xf0
      000169 F7               [ 1]  414 	ld	(x), a
                                    415 ;	libs/stm8l_usart.c: 504: USARTx->CR4 |= USART_Address;
      00016A 88               [ 1]  416 	push	a
      00016B F6               [ 1]  417 	ld	a, (x)
      00016C 84               [ 1]  418 	pop	a
      00016D 1A 01            [ 1]  419 	or	a, (0x01, sp)
      00016F F7               [ 1]  420 	ld	(x), a
                                    421 ;	libs/stm8l_usart.c: 505: }
      000170 84               [ 1]  422 	pop	a
      000171 81               [ 4]  423 	ret
                                    424 ;	libs/stm8l_usart.c: 515: void USART_WakeUpConfig(USART_TypeDef* USARTx, USART_WakeUp_TypeDef USART_WakeUp)
                                    425 ;	-----------------------------------------
                                    426 ;	 function USART_WakeUpConfig
                                    427 ;	-----------------------------------------
      000172                        428 _USART_WakeUpConfig:
      000172 88               [ 1]  429 	push	a
      000173 6B 01            [ 1]  430 	ld	(0x01, sp), a
                                    431 ;	libs/stm8l_usart.c: 519: USARTx->CR1 &= ((uint8_t)~USART_CR1_WAKE);
      000175 1C 00 04         [ 2]  432 	addw	x, #0x0004
      000178 F6               [ 1]  433 	ld	a, (x)
      000179 A4 F7            [ 1]  434 	and	a, #0xf7
      00017B F7               [ 1]  435 	ld	(x), a
                                    436 ;	libs/stm8l_usart.c: 520: USARTx->CR1 |= (uint8_t)USART_WakeUp;
      00017C 88               [ 1]  437 	push	a
      00017D F6               [ 1]  438 	ld	a, (x)
      00017E 84               [ 1]  439 	pop	a
      00017F 1A 01            [ 1]  440 	or	a, (0x01, sp)
      000181 F7               [ 1]  441 	ld	(x), a
                                    442 ;	libs/stm8l_usart.c: 521: }
      000182 84               [ 1]  443 	pop	a
      000183 81               [ 4]  444 	ret
                                    445 ;	libs/stm8l_usart.c: 566: void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
                                    446 ;	-----------------------------------------
                                    447 ;	 function USART_HalfDuplexCmd
                                    448 ;	-----------------------------------------
      000184                        449 _USART_HalfDuplexCmd:
      000184 88               [ 1]  450 	push	a
      000185 6B 01            [ 1]  451 	ld	(0x01, sp), a
                                    452 ;	libs/stm8l_usart.c: 572: USARTx->CR5 |= USART_CR5_HDSEL;  /**< USART Half Duplex Enable  */
      000187 1C 00 08         [ 2]  453 	addw	x, #0x0008
      00018A F6               [ 1]  454 	ld	a, (x)
                                    455 ;	libs/stm8l_usart.c: 570: if (NewState != DISABLE)
      00018B 0D 01            [ 1]  456 	tnz	(0x01, sp)
      00018D 27 05            [ 1]  457 	jreq	00102$
                                    458 ;	libs/stm8l_usart.c: 572: USARTx->CR5 |= USART_CR5_HDSEL;  /**< USART Half Duplex Enable  */
      00018F AA 08            [ 1]  459 	or	a, #0x08
      000191 F7               [ 1]  460 	ld	(x), a
      000192 20 03            [ 2]  461 	jra	00104$
      000194                        462 00102$:
                                    463 ;	libs/stm8l_usart.c: 576: USARTx->CR5 &= (uint8_t)~USART_CR5_HDSEL; /**< USART Half Duplex Disable */
      000194 A4 F7            [ 1]  464 	and	a, #0xf7
      000196 F7               [ 1]  465 	ld	(x), a
      000197                        466 00104$:
                                    467 ;	libs/stm8l_usart.c: 578: }
      000197 84               [ 1]  468 	pop	a
      000198 81               [ 4]  469 	ret
                                    470 ;	libs/stm8l_usart.c: 644: void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
                                    471 ;	-----------------------------------------
                                    472 ;	 function USART_SmartCardCmd
                                    473 ;	-----------------------------------------
      000199                        474 _USART_SmartCardCmd:
      000199 88               [ 1]  475 	push	a
      00019A 6B 01            [ 1]  476 	ld	(0x01, sp), a
                                    477 ;	libs/stm8l_usart.c: 651: USARTx->CR5 |= USART_CR5_SCEN;
      00019C 1C 00 08         [ 2]  478 	addw	x, #0x0008
      00019F F6               [ 1]  479 	ld	a, (x)
                                    480 ;	libs/stm8l_usart.c: 648: if (NewState != DISABLE)
      0001A0 0D 01            [ 1]  481 	tnz	(0x01, sp)
      0001A2 27 05            [ 1]  482 	jreq	00102$
                                    483 ;	libs/stm8l_usart.c: 651: USARTx->CR5 |= USART_CR5_SCEN;
      0001A4 AA 20            [ 1]  484 	or	a, #0x20
      0001A6 F7               [ 1]  485 	ld	(x), a
      0001A7 20 03            [ 2]  486 	jra	00104$
      0001A9                        487 00102$:
                                    488 ;	libs/stm8l_usart.c: 656: USARTx->CR5 &= ((uint8_t)(~USART_CR5_SCEN));
      0001A9 A4 DF            [ 1]  489 	and	a, #0xdf
      0001AB F7               [ 1]  490 	ld	(x), a
      0001AC                        491 00104$:
                                    492 ;	libs/stm8l_usart.c: 658: }
      0001AC 84               [ 1]  493 	pop	a
      0001AD 81               [ 4]  494 	ret
                                    495 ;	libs/stm8l_usart.c: 667: void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
                                    496 ;	-----------------------------------------
                                    497 ;	 function USART_SmartCardNACKCmd
                                    498 ;	-----------------------------------------
      0001AE                        499 _USART_SmartCardNACKCmd:
      0001AE 88               [ 1]  500 	push	a
      0001AF 6B 01            [ 1]  501 	ld	(0x01, sp), a
                                    502 ;	libs/stm8l_usart.c: 674: USARTx->CR5 |= USART_CR5_NACK;
      0001B1 1C 00 08         [ 2]  503 	addw	x, #0x0008
      0001B4 F6               [ 1]  504 	ld	a, (x)
                                    505 ;	libs/stm8l_usart.c: 671: if (NewState != DISABLE)
      0001B5 0D 01            [ 1]  506 	tnz	(0x01, sp)
      0001B7 27 05            [ 1]  507 	jreq	00102$
                                    508 ;	libs/stm8l_usart.c: 674: USARTx->CR5 |= USART_CR5_NACK;
      0001B9 AA 10            [ 1]  509 	or	a, #0x10
      0001BB F7               [ 1]  510 	ld	(x), a
      0001BC 20 03            [ 2]  511 	jra	00104$
      0001BE                        512 00102$:
                                    513 ;	libs/stm8l_usart.c: 679: USARTx->CR5 &= ((uint8_t)~(USART_CR5_NACK));
      0001BE A4 EF            [ 1]  514 	and	a, #0xef
      0001C0 F7               [ 1]  515 	ld	(x), a
      0001C1                        516 00104$:
                                    517 ;	libs/stm8l_usart.c: 681: }
      0001C1 84               [ 1]  518 	pop	a
      0001C2 81               [ 4]  519 	ret
                                    520 ;	libs/stm8l_usart.c: 690: void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
                                    521 ;	-----------------------------------------
                                    522 ;	 function USART_SetGuardTime
                                    523 ;	-----------------------------------------
      0001C3                        524 _USART_SetGuardTime:
                                    525 ;	libs/stm8l_usart.c: 693: USARTx->GTR = USART_GuardTime;
      0001C3 1C 00 09         [ 2]  526 	addw	x, #0x0009
      0001C6 F7               [ 1]  527 	ld	(x), a
                                    528 ;	libs/stm8l_usart.c: 694: }
      0001C7 81               [ 4]  529 	ret
                                    530 ;	libs/stm8l_usart.c: 751: void USART_IrDAConfig(USART_TypeDef* USARTx, USART_IrDAMode_TypeDef USART_IrDAMode)
                                    531 ;	-----------------------------------------
                                    532 ;	 function USART_IrDAConfig
                                    533 ;	-----------------------------------------
      0001C8                        534 _USART_IrDAConfig:
      0001C8 88               [ 1]  535 	push	a
      0001C9 6B 01            [ 1]  536 	ld	(0x01, sp), a
                                    537 ;	libs/stm8l_usart.c: 757: USARTx->CR5 |= USART_CR5_IRLP;
      0001CB 1C 00 08         [ 2]  538 	addw	x, #0x0008
      0001CE F6               [ 1]  539 	ld	a, (x)
                                    540 ;	libs/stm8l_usart.c: 755: if (USART_IrDAMode != USART_IrDAMode_Normal)
      0001CF 0D 01            [ 1]  541 	tnz	(0x01, sp)
      0001D1 27 05            [ 1]  542 	jreq	00102$
                                    543 ;	libs/stm8l_usart.c: 757: USARTx->CR5 |= USART_CR5_IRLP;
      0001D3 AA 04            [ 1]  544 	or	a, #0x04
      0001D5 F7               [ 1]  545 	ld	(x), a
      0001D6 20 03            [ 2]  546 	jra	00104$
      0001D8                        547 00102$:
                                    548 ;	libs/stm8l_usart.c: 761: USARTx->CR5 &= ((uint8_t)~USART_CR5_IRLP);
      0001D8 A4 FB            [ 1]  549 	and	a, #0xfb
      0001DA F7               [ 1]  550 	ld	(x), a
      0001DB                        551 00104$:
                                    552 ;	libs/stm8l_usart.c: 763: }
      0001DB 84               [ 1]  553 	pop	a
      0001DC 81               [ 4]  554 	ret
                                    555 ;	libs/stm8l_usart.c: 772: void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
                                    556 ;	-----------------------------------------
                                    557 ;	 function USART_IrDACmd
                                    558 ;	-----------------------------------------
      0001DD                        559 _USART_IrDACmd:
      0001DD 88               [ 1]  560 	push	a
      0001DE 6B 01            [ 1]  561 	ld	(0x01, sp), a
                                    562 ;	libs/stm8l_usart.c: 781: USARTx->CR5 |= USART_CR5_IREN;
      0001E0 1C 00 08         [ 2]  563 	addw	x, #0x0008
      0001E3 F6               [ 1]  564 	ld	a, (x)
                                    565 ;	libs/stm8l_usart.c: 778: if (NewState != DISABLE)
      0001E4 0D 01            [ 1]  566 	tnz	(0x01, sp)
      0001E6 27 05            [ 1]  567 	jreq	00102$
                                    568 ;	libs/stm8l_usart.c: 781: USARTx->CR5 |= USART_CR5_IREN;
      0001E8 AA 02            [ 1]  569 	or	a, #0x02
      0001EA F7               [ 1]  570 	ld	(x), a
      0001EB 20 03            [ 2]  571 	jra	00104$
      0001ED                        572 00102$:
                                    573 ;	libs/stm8l_usart.c: 786: USARTx->CR5 &= ((uint8_t)~USART_CR5_IREN);
      0001ED A4 FD            [ 1]  574 	and	a, #0xfd
      0001EF F7               [ 1]  575 	ld	(x), a
      0001F0                        576 00104$:
                                    577 ;	libs/stm8l_usart.c: 788: }
      0001F0 84               [ 1]  578 	pop	a
      0001F1 81               [ 4]  579 	ret
                                    580 ;	libs/stm8l_usart.c: 818: void USART_DMACmd(USART_TypeDef* USARTx, USART_DMAReq_TypeDef USART_DMAReq,
                                    581 ;	-----------------------------------------
                                    582 ;	 function USART_DMACmd
                                    583 ;	-----------------------------------------
      0001F2                        584 _USART_DMACmd:
      0001F2 88               [ 1]  585 	push	a
                                    586 ;	libs/stm8l_usart.c: 829: USARTx->CR5 |= (uint8_t) USART_DMAReq;
      0001F3 1C 00 08         [ 2]  587 	addw	x, #0x0008
      0001F6 88               [ 1]  588 	push	a
      0001F7 F6               [ 1]  589 	ld	a, (x)
      0001F8 6B 02            [ 1]  590 	ld	(0x02, sp), a
      0001FA 84               [ 1]  591 	pop	a
                                    592 ;	libs/stm8l_usart.c: 825: if (NewState != DISABLE)
      0001FB 0D 04            [ 1]  593 	tnz	(0x04, sp)
      0001FD 27 05            [ 1]  594 	jreq	00102$
                                    595 ;	libs/stm8l_usart.c: 829: USARTx->CR5 |= (uint8_t) USART_DMAReq;
      0001FF 1A 01            [ 1]  596 	or	a, (0x01, sp)
      000201 F7               [ 1]  597 	ld	(x), a
      000202 20 04            [ 2]  598 	jra	00104$
      000204                        599 00102$:
                                    600 ;	libs/stm8l_usart.c: 835: USARTx->CR5 &= (uint8_t)~USART_DMAReq;
      000204 43               [ 1]  601 	cpl	a
      000205 14 01            [ 1]  602 	and	a, (0x01, sp)
      000207 F7               [ 1]  603 	ld	(x), a
      000208                        604 00104$:
                                    605 ;	libs/stm8l_usart.c: 837: }
      000208 84               [ 1]  606 	pop	a
      000209 85               [ 2]  607 	popw	x
      00020A 84               [ 1]  608 	pop	a
      00020B FC               [ 2]  609 	jp	(x)
                                    610 ;	libs/stm8l_usart.c: 939: void USART_ITConfig(USART_TypeDef* USARTx, USART_IT_TypeDef USART_IT, FunctionalState NewState)
                                    611 ;	-----------------------------------------
                                    612 ;	 function USART_ITConfig
                                    613 ;	-----------------------------------------
      00020C                        614 _USART_ITConfig:
      00020C 52 09            [ 2]  615 	sub	sp, #9
      00020E 1F 08            [ 2]  616 	ldw	(0x08, sp), x
                                    617 ;	libs/stm8l_usart.c: 946: usartreg = (uint8_t)((uint16_t)USART_IT >> 0x08);
      000210 1E 0C            [ 2]  618 	ldw	x, (0x0c, sp)
                                    619 ;	libs/stm8l_usart.c: 948: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)USART_IT & (uint8_t)0x0F));
      000212 7B 0D            [ 1]  620 	ld	a, (0x0d, sp)
      000214 A4 0F            [ 1]  621 	and	a, #0x0f
      000216 88               [ 1]  622 	push	a
      000217 A6 01            [ 1]  623 	ld	a, #0x01
      000219 6B 08            [ 1]  624 	ld	(0x08, sp), a
      00021B 84               [ 1]  625 	pop	a
      00021C 4D               [ 1]  626 	tnz	a
      00021D 27 05            [ 1]  627 	jreq	00144$
      00021F                        628 00143$:
      00021F 08 07            [ 1]  629 	sll	(0x07, sp)
      000221 4A               [ 1]  630 	dec	a
      000222 26 FB            [ 1]  631 	jrne	00143$
      000224                        632 00144$:
                                    633 ;	libs/stm8l_usart.c: 953: if (usartreg == 0x01)
      000224 9E               [ 1]  634 	ld	a, xh
      000225 4A               [ 1]  635 	dec	a
      000226 26 05            [ 1]  636 	jrne	00146$
      000228 A6 01            [ 1]  637 	ld	a, #0x01
      00022A 6B 01            [ 1]  638 	ld	(0x01, sp), a
      00022C C5                     639 	.byte 0xc5
      00022D                        640 00146$:
      00022D 0F 01            [ 1]  641 	clr	(0x01, sp)
      00022F                        642 00147$:
                                    643 ;	libs/stm8l_usart.c: 955: USARTx->CR1 |= itpos;
      00022F 16 08            [ 2]  644 	ldw	y, (0x08, sp)
      000231 72 A9 00 04      [ 2]  645 	addw	y, #0x0004
      000235 17 02            [ 2]  646 	ldw	(0x02, sp), y
                                    647 ;	libs/stm8l_usart.c: 957: else if (usartreg == 0x05)
      000237 9E               [ 1]  648 	ld	a, xh
      000238 A0 05            [ 1]  649 	sub	a, #0x05
      00023A 26 04            [ 1]  650 	jrne	00149$
      00023C 4C               [ 1]  651 	inc	a
      00023D 6B 04            [ 1]  652 	ld	(0x04, sp), a
      00023F C5                     653 	.byte 0xc5
      000240                        654 00149$:
      000240 0F 04            [ 1]  655 	clr	(0x04, sp)
      000242                        656 00150$:
                                    657 ;	libs/stm8l_usart.c: 959: USARTx->CR5 |= itpos;
      000242 1E 08            [ 2]  658 	ldw	x, (0x08, sp)
      000244 1C 00 08         [ 2]  659 	addw	x, #0x0008
      000247 1F 05            [ 2]  660 	ldw	(0x05, sp), x
                                    661 ;	libs/stm8l_usart.c: 964: USARTx->CR2 |= itpos;
      000249 1E 08            [ 2]  662 	ldw	x, (0x08, sp)
      00024B 1C 00 05         [ 2]  663 	addw	x, #0x0005
                                    664 ;	libs/stm8l_usart.c: 950: if (NewState != DISABLE)
      00024E 0D 0E            [ 1]  665 	tnz	(0x0e, sp)
      000250 27 22            [ 1]  666 	jreq	00114$
                                    667 ;	libs/stm8l_usart.c: 953: if (usartreg == 0x01)
      000252 0D 01            [ 1]  668 	tnz	(0x01, sp)
      000254 27 0A            [ 1]  669 	jreq	00105$
                                    670 ;	libs/stm8l_usart.c: 955: USARTx->CR1 |= itpos;
      000256 1E 02            [ 2]  671 	ldw	x, (0x02, sp)
      000258 F6               [ 1]  672 	ld	a, (x)
      000259 1A 07            [ 1]  673 	or	a, (0x07, sp)
      00025B 1E 02            [ 2]  674 	ldw	x, (0x02, sp)
      00025D F7               [ 1]  675 	ld	(x), a
      00025E 20 36            [ 2]  676 	jra	00116$
      000260                        677 00105$:
                                    678 ;	libs/stm8l_usart.c: 957: else if (usartreg == 0x05)
      000260 0D 04            [ 1]  679 	tnz	(0x04, sp)
      000262 27 0A            [ 1]  680 	jreq	00102$
                                    681 ;	libs/stm8l_usart.c: 959: USARTx->CR5 |= itpos;
      000264 1E 05            [ 2]  682 	ldw	x, (0x05, sp)
      000266 F6               [ 1]  683 	ld	a, (x)
      000267 1A 07            [ 1]  684 	or	a, (0x07, sp)
      000269 1E 05            [ 2]  685 	ldw	x, (0x05, sp)
      00026B F7               [ 1]  686 	ld	(x), a
      00026C 20 28            [ 2]  687 	jra	00116$
      00026E                        688 00102$:
                                    689 ;	libs/stm8l_usart.c: 964: USARTx->CR2 |= itpos;
      00026E F6               [ 1]  690 	ld	a, (x)
      00026F 1A 07            [ 1]  691 	or	a, (0x07, sp)
      000271 F7               [ 1]  692 	ld	(x), a
      000272 20 22            [ 2]  693 	jra	00116$
      000274                        694 00114$:
                                    695 ;	libs/stm8l_usart.c: 972: USARTx->CR1 &= (uint8_t)(~itpos);
      000274 03 07            [ 1]  696 	cpl	(0x07, sp)
                                    697 ;	libs/stm8l_usart.c: 970: if (usartreg == 0x01)
      000276 0D 01            [ 1]  698 	tnz	(0x01, sp)
      000278 27 0A            [ 1]  699 	jreq	00111$
                                    700 ;	libs/stm8l_usart.c: 972: USARTx->CR1 &= (uint8_t)(~itpos);
      00027A 1E 02            [ 2]  701 	ldw	x, (0x02, sp)
      00027C F6               [ 1]  702 	ld	a, (x)
      00027D 14 07            [ 1]  703 	and	a, (0x07, sp)
      00027F 1E 02            [ 2]  704 	ldw	x, (0x02, sp)
      000281 F7               [ 1]  705 	ld	(x), a
      000282 20 12            [ 2]  706 	jra	00116$
      000284                        707 00111$:
                                    708 ;	libs/stm8l_usart.c: 974: else if (usartreg == 0x05)
      000284 0D 04            [ 1]  709 	tnz	(0x04, sp)
      000286 27 0A            [ 1]  710 	jreq	00108$
                                    711 ;	libs/stm8l_usart.c: 976: USARTx->CR5 &= (uint8_t)(~itpos);
      000288 1E 05            [ 2]  712 	ldw	x, (0x05, sp)
      00028A F6               [ 1]  713 	ld	a, (x)
      00028B 14 07            [ 1]  714 	and	a, (0x07, sp)
      00028D 1E 05            [ 2]  715 	ldw	x, (0x05, sp)
      00028F F7               [ 1]  716 	ld	(x), a
      000290 20 04            [ 2]  717 	jra	00116$
      000292                        718 00108$:
                                    719 ;	libs/stm8l_usart.c: 981: USARTx->CR2 &= (uint8_t)(~itpos);
      000292 F6               [ 1]  720 	ld	a, (x)
      000293 14 07            [ 1]  721 	and	a, (0x07, sp)
      000295 F7               [ 1]  722 	ld	(x), a
      000296                        723 00116$:
                                    724 ;	libs/stm8l_usart.c: 984: }
      000296 1E 0A            [ 2]  725 	ldw	x, (10, sp)
      000298 5B 0E            [ 2]  726 	addw	sp, #14
      00029A FC               [ 2]  727 	jp	(x)
                                    728 ;	libs/stm8l_usart.c: 1002: FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, USART_FLAG_TypeDef USART_FLAG)
                                    729 ;	-----------------------------------------
                                    730 ;	 function USART_GetFlagStatus
                                    731 ;	-----------------------------------------
      00029B                        732 _USART_GetFlagStatus:
      00029B 88               [ 1]  733 	push	a
                                    734 ;	libs/stm8l_usart.c: 1009: if (USART_FLAG == USART_FLAG_SBK)
      00029C 16 04            [ 2]  735 	ldw	y, (0x04, sp)
                                    736 ;	libs/stm8l_usart.c: 1011: if ((USARTx->CR2 & (uint8_t)USART_FLAG) != (uint8_t)0x00)
      00029E 7B 05            [ 1]  737 	ld	a, (0x05, sp)
      0002A0 6B 01            [ 1]  738 	ld	(0x01, sp), a
                                    739 ;	libs/stm8l_usart.c: 1009: if (USART_FLAG == USART_FLAG_SBK)
      0002A2 90 A3 01 01      [ 2]  740 	cpw	y, #0x0101
      0002A6 26 0D            [ 1]  741 	jrne	00108$
                                    742 ;	libs/stm8l_usart.c: 1011: if ((USARTx->CR2 & (uint8_t)USART_FLAG) != (uint8_t)0x00)
      0002A8 E6 05            [ 1]  743 	ld	a, (0x5, x)
      0002AA 14 01            [ 1]  744 	and	a, (0x01, sp)
      0002AC 27 04            [ 1]  745 	jreq	00102$
                                    746 ;	libs/stm8l_usart.c: 1014: status = SET;
      0002AE A6 01            [ 1]  747 	ld	a, #0x01
      0002B0 20 0C            [ 2]  748 	jra	00109$
      0002B2                        749 00102$:
                                    750 ;	libs/stm8l_usart.c: 1019: status = RESET;
      0002B2 4F               [ 1]  751 	clr	a
      0002B3 20 09            [ 2]  752 	jra	00109$
      0002B5                        753 00108$:
                                    754 ;	libs/stm8l_usart.c: 1024: if ((USARTx->SR & (uint8_t)USART_FLAG) != (uint8_t)0x00)
      0002B5 F6               [ 1]  755 	ld	a, (x)
      0002B6 14 01            [ 1]  756 	and	a, (0x01, sp)
      0002B8 27 03            [ 1]  757 	jreq	00105$
                                    758 ;	libs/stm8l_usart.c: 1027: status = SET;
      0002BA A6 01            [ 1]  759 	ld	a, #0x01
                                    760 ;	libs/stm8l_usart.c: 1032: status = RESET;
      0002BC 21                     761 	.byte 0x21
      0002BD                        762 00105$:
      0002BD 4F               [ 1]  763 	clr	a
      0002BE                        764 00109$:
                                    765 ;	libs/stm8l_usart.c: 1036: return status;
                                    766 ;	libs/stm8l_usart.c: 1037: }
      0002BE 1E 02            [ 2]  767 	ldw	x, (2, sp)
      0002C0 5B 05            [ 2]  768 	addw	sp, #5
      0002C2 FC               [ 2]  769 	jp	(x)
                                    770 ;	libs/stm8l_usart.c: 1060: void USART_ClearFlag(USART_TypeDef* USARTx, USART_FLAG_TypeDef USART_FLAG)
                                    771 ;	-----------------------------------------
                                    772 ;	 function USART_ClearFlag
                                    773 ;	-----------------------------------------
      0002C3                        774 _USART_ClearFlag:
                                    775 ;	libs/stm8l_usart.c: 1065: USARTx->SR = (uint8_t)((uint16_t)~((uint16_t)USART_FLAG));
      0002C3 16 03            [ 2]  776 	ldw	y, (0x03, sp)
      0002C5 90 53            [ 2]  777 	cplw	y
      0002C7 90 9F            [ 1]  778 	ld	a, yl
      0002C9 F7               [ 1]  779 	ld	(x), a
                                    780 ;	libs/stm8l_usart.c: 1066: }
      0002CA 1E 01            [ 2]  781 	ldw	x, (1, sp)
      0002CC 5B 04            [ 2]  782 	addw	sp, #4
      0002CE FC               [ 2]  783 	jp	(x)
                                    784 ;	libs/stm8l_usart.c: 1083: ITStatus USART_GetITStatus(USART_TypeDef* USARTx, USART_IT_TypeDef USART_IT)
                                    785 ;	-----------------------------------------
                                    786 ;	 function USART_GetITStatus
                                    787 ;	-----------------------------------------
      0002CF                        788 _USART_GetITStatus:
      0002CF 52 06            [ 2]  789 	sub	sp, #6
      0002D1 1F 05            [ 2]  790 	ldw	(0x05, sp), x
                                    791 ;	libs/stm8l_usart.c: 1096: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)USART_IT & (uint8_t)0x0F));
      0002D3 7B 0A            [ 1]  792 	ld	a, (0x0a, sp)
      0002D5 97               [ 1]  793 	ld	xl, a
      0002D6 A4 0F            [ 1]  794 	and	a, #0x0f
      0002D8 88               [ 1]  795 	push	a
      0002D9 A6 01            [ 1]  796 	ld	a, #0x01
      0002DB 6B 05            [ 1]  797 	ld	(0x05, sp), a
      0002DD 84               [ 1]  798 	pop	a
      0002DE 4D               [ 1]  799 	tnz	a
      0002DF 27 05            [ 1]  800 	jreq	00163$
      0002E1                        801 00162$:
      0002E1 08 04            [ 1]  802 	sll	(0x04, sp)
      0002E3 4A               [ 1]  803 	dec	a
      0002E4 26 FB            [ 1]  804 	jrne	00162$
      0002E6                        805 00163$:
                                    806 ;	libs/stm8l_usart.c: 1098: itmask1 = (uint8_t)((uint8_t)USART_IT >> (uint8_t)4);
      0002E6 9F               [ 1]  807 	ld	a, xl
      0002E7 4E               [ 1]  808 	swap	a
      0002E8 A4 0F            [ 1]  809 	and	a, #0x0f
                                    810 ;	libs/stm8l_usart.c: 1100: itmask2 = (uint8_t)((uint8_t)1 << itmask1);
      0002EA 88               [ 1]  811 	push	a
      0002EB A6 01            [ 1]  812 	ld	a, #0x01
      0002ED 6B 02            [ 1]  813 	ld	(0x02, sp), a
      0002EF 84               [ 1]  814 	pop	a
      0002F0 4D               [ 1]  815 	tnz	a
      0002F1 27 05            [ 1]  816 	jreq	00165$
      0002F3                        817 00164$:
      0002F3 08 01            [ 1]  818 	sll	(0x01, sp)
      0002F5 4A               [ 1]  819 	dec	a
      0002F6 26 FB            [ 1]  820 	jrne	00164$
      0002F8                        821 00165$:
                                    822 ;	libs/stm8l_usart.c: 1103: if (USART_IT == USART_IT_PE)
      0002F8 16 09            [ 2]  823 	ldw	y, (0x09, sp)
      0002FA 17 02            [ 2]  824 	ldw	(0x02, sp), y
                                    825 ;	libs/stm8l_usart.c: 1109: if (((USARTx->SR & itpos) != (uint8_t)0x00) && enablestatus)
      0002FC 1E 05            [ 2]  826 	ldw	x, (0x05, sp)
      0002FE F6               [ 1]  827 	ld	a, (x)
      0002FF 14 04            [ 1]  828 	and	a, (0x04, sp)
      000301 6B 04            [ 1]  829 	ld	(0x04, sp), a
                                    830 ;	libs/stm8l_usart.c: 1103: if (USART_IT == USART_IT_PE)
      000303 1E 02            [ 2]  831 	ldw	x, (0x02, sp)
      000305 A3 01 00         [ 2]  832 	cpw	x, #0x0100
      000308 26 17            [ 1]  833 	jrne	00118$
                                    834 ;	libs/stm8l_usart.c: 1106: enablestatus = (uint8_t)((uint8_t)USARTx->CR1 & itmask2);
      00030A 16 05            [ 2]  835 	ldw	y, (0x05, sp)
      00030C 17 02            [ 2]  836 	ldw	(0x02, sp), y
      00030E 93               [ 1]  837 	ldw	x, y
      00030F E6 04            [ 1]  838 	ld	a, (0x4, x)
      000311 14 01            [ 1]  839 	and	a, (0x01, sp)
                                    840 ;	libs/stm8l_usart.c: 1109: if (((USARTx->SR & itpos) != (uint8_t)0x00) && enablestatus)
      000313 0D 04            [ 1]  841 	tnz	(0x04, sp)
      000315 27 07            [ 1]  842 	jreq	00102$
      000317 4D               [ 1]  843 	tnz	a
      000318 27 04            [ 1]  844 	jreq	00102$
                                    845 ;	libs/stm8l_usart.c: 1112: pendingbitstatus = SET;
      00031A A6 01            [ 1]  846 	ld	a, #0x01
      00031C 20 35            [ 2]  847 	jra	00119$
      00031E                        848 00102$:
                                    849 ;	libs/stm8l_usart.c: 1117: pendingbitstatus = RESET;
      00031E 4F               [ 1]  850 	clr	a
      00031F 20 32            [ 2]  851 	jra	00119$
      000321                        852 00118$:
                                    853 ;	libs/stm8l_usart.c: 1124: enablestatus = (uint8_t)((uint8_t)USARTx->CR2 & itmask2);
      000321 1E 05            [ 2]  854 	ldw	x, (0x05, sp)
      000323 E6 05            [ 1]  855 	ld	a, (0x5, x)
      000325 14 01            [ 1]  856 	and	a, (0x01, sp)
                                    857 ;	libs/stm8l_usart.c: 1121: else if (USART_IT == USART_IT_OR)
      000327 1E 02            [ 2]  858 	ldw	x, (0x02, sp)
      000329 A3 02 35         [ 2]  859 	cpw	x, #0x0235
      00032C 26 1A            [ 1]  860 	jrne	00115$
                                    861 ;	libs/stm8l_usart.c: 1124: enablestatus = (uint8_t)((uint8_t)USARTx->CR2 & itmask2);
      00032E 6B 03            [ 1]  862 	ld	(0x03, sp), a
                                    863 ;	libs/stm8l_usart.c: 1127: temp = (uint8_t)(USARTx->CR5 & USART_CR5_EIE);
      000330 1E 05            [ 2]  864 	ldw	x, (0x05, sp)
      000332 E6 08            [ 1]  865 	ld	a, (0x8, x)
      000334 A4 01            [ 1]  866 	and	a, #0x01
                                    867 ;	libs/stm8l_usart.c: 1129: if (( (USARTx->SR & itpos) != 0x00) && ((enablestatus || temp)))
      000336 0D 04            [ 1]  868 	tnz	(0x04, sp)
      000338 27 0B            [ 1]  869 	jreq	00106$
      00033A 0D 03            [ 1]  870 	tnz	(0x03, sp)
      00033C 26 03            [ 1]  871 	jrne	00105$
      00033E 4D               [ 1]  872 	tnz	a
      00033F 27 04            [ 1]  873 	jreq	00106$
      000341                        874 00105$:
                                    875 ;	libs/stm8l_usart.c: 1132: pendingbitstatus = SET;
      000341 A6 01            [ 1]  876 	ld	a, #0x01
      000343 20 0E            [ 2]  877 	jra	00119$
      000345                        878 00106$:
                                    879 ;	libs/stm8l_usart.c: 1137: pendingbitstatus = RESET;
      000345 4F               [ 1]  880 	clr	a
      000346 20 0B            [ 2]  881 	jra	00119$
      000348                        882 00115$:
                                    883 ;	libs/stm8l_usart.c: 1144: enablestatus = (uint8_t)((uint8_t)USARTx->CR2 & itmask2);
                                    884 ;	libs/stm8l_usart.c: 1146: if (((USARTx->SR & itpos) != (uint8_t)0x00) && enablestatus)
      000348 0D 04            [ 1]  885 	tnz	(0x04, sp)
      00034A 27 06            [ 1]  886 	jreq	00111$
      00034C 4D               [ 1]  887 	tnz	a
      00034D 27 03            [ 1]  888 	jreq	00111$
                                    889 ;	libs/stm8l_usart.c: 1149: pendingbitstatus = SET;
      00034F A6 01            [ 1]  890 	ld	a, #0x01
                                    891 ;	libs/stm8l_usart.c: 1154: pendingbitstatus = RESET;
      000351 21                     892 	.byte 0x21
      000352                        893 00111$:
      000352 4F               [ 1]  894 	clr	a
      000353                        895 00119$:
                                    896 ;	libs/stm8l_usart.c: 1159: return  pendingbitstatus;
                                    897 ;	libs/stm8l_usart.c: 1160: }
      000353 1E 07            [ 2]  898 	ldw	x, (7, sp)
      000355 5B 0A            [ 2]  899 	addw	sp, #10
      000357 FC               [ 2]  900 	jp	(x)
                                    901 ;	libs/stm8l_usart.c: 1183: void USART_ClearITPendingBit(USART_TypeDef* USARTx)//, USART_IT_TypeDef USART_IT)
                                    902 ;	-----------------------------------------
                                    903 ;	 function USART_ClearITPendingBit
                                    904 ;	-----------------------------------------
      000358                        905 _USART_ClearITPendingBit:
                                    906 ;	libs/stm8l_usart.c: 1188: USARTx->SR &= (uint8_t)(~USART_SR_TC);
      000358 F6               [ 1]  907 	ld	a, (x)
      000359 A4 BF            [ 1]  908 	and	a, #0xbf
      00035B F7               [ 1]  909 	ld	(x), a
                                    910 ;	libs/stm8l_usart.c: 1189: }
      00035C 81               [ 4]  911 	ret
                                    912 	.area CODE
                                    913 	.area CONST
                                    914 	.area INITIALIZER
                                    915 	.area CABS (ABS)
